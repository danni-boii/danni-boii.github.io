{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Danny Boy\\\\Documents\\\\GitHub\\\\danni-boii.github.io\\\\src\\\\WeatherApp.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { ThemeProvider } from 'emotion-theming';\nimport dayjs from 'dayjs';\nimport WeatherCard from './WeatherCard';\nimport useWeatherApi from './useWeatherApi';\nimport sunriseAndSunsetData from './sunrise-sunset.json';\nimport WeatherSetting from './WeatherSetting';\nimport { findLocation } from './utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst theme = {\n  light: {\n    backgroundColor: '#ededed',\n    foregroundColor: '#f9f9f9',\n    boxShadow: '0 1px 3px 0 #999999',\n    titleColor: '#212121',\n    temperatureColor: '#757575',\n    textColor: '#828282'\n  },\n  dark: {\n    backgroundColor: '#1F2022',\n    foregroundColor: '#121416',\n    boxShadow: '0 1px 4px 0 rgba(12, 12, 13, 0.2), 0 0 0 1px rgba(0, 0, 0, 0.15)',\n    titleColor: '#f9f9fa',\n    temperatureColor: '#dddddd',\n    textColor: '#cccccc'\n  }\n};\n\nconst getMoment = locationName => {\n  const location = sunriseAndSunsetData.find(data => data.locationName === locationName);\n  if (!location) return null;\n  const now = dayjs();\n  const nowDate = Intl.DateTimeFormat('zh-TW', {\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit'\n  }).format(now).replace(/\\//g, '-');\n  const locationDate = location.time && location.time.find(time => time.dataTime === nowDate);\n  const sunriseTimestamp = dayjs(`${locationDate.dataTime} ${locationDate.sunrise}`).unix();\n  const sunsetTimestamp = dayjs(`${locationDate.dataTime} ${locationDate.sunset}`).unix();\n  const nowTimeStamp = now.unix();\n  return sunriseTimestamp <= nowTimeStamp && nowTimeStamp <= sunsetTimestamp ? 'day' : 'night';\n};\n\nconst WeatherApp = () => {\n  _s();\n\n  // console.log('--- invoke function component ---');\n  const storageCity = localStorage.getItem('cityName');\n  const [currentCity, setCurrentCity] = useState(storageCity || '臺北市');\n  const currentLocation = findLocation(currentCity) || {};\n  const [weatherElement, fetchData] = useWeatherApi(currentLocation);\n  const [currentTheme, setCurrentTheme] = useState('light');\n  const [currentPage, setCurrentPage] = useState('WeatherCard');\n  const moment = useMemo(() => getMoment(currentLocation.sunriseCityName), [currentLocation.sunriseCityName]);\n  useEffect(() => {\n    setCurrentTheme(moment === 'day' ? 'light' : 'dark');\n  }, [moment]);\n  useEffect(() => {\n    localStorage.setItem('cityName', currentCity);\n  }, [currentCity]);\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme[currentTheme],\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      children: [\" \", currentPage === 'WeatherCard' && /*#__PURE__*/_jsxDEV(WeatherCard, {\n        cityName: currentLocation.cityName,\n        weatherElement: weatherElement,\n        moment: moment,\n        fetchData: fetchData,\n        setCurrentPage: setCurrentPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 48\n      }, this), currentPage === 'WeatherSetting' && /*#__PURE__*/_jsxDEV(WeatherSetting, {\n        cityName: currentLocation.cityName,\n        setCurrentCity: setCurrentCity,\n        setCurrentPage: setCurrentPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 51\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 14\n  }, this);\n};\n\n_s(WeatherApp, \"1vUJAEaF57yS3ppzyq9REZJ46qs=\", false, function () {\n  return [useWeatherApi];\n});\n\n_c = WeatherApp;\nexport default WeatherApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherApp\");","map":{"version":3,"sources":["C:/Users/Danny Boy/Documents/GitHub/danni-boii.github.io/src/WeatherApp.js"],"names":["React","useState","useEffect","useMemo","ThemeProvider","dayjs","WeatherCard","useWeatherApi","sunriseAndSunsetData","WeatherSetting","findLocation","theme","light","backgroundColor","foregroundColor","boxShadow","titleColor","temperatureColor","textColor","dark","getMoment","locationName","location","find","data","now","nowDate","Intl","DateTimeFormat","year","month","day","format","replace","locationDate","time","dataTime","sunriseTimestamp","sunrise","unix","sunsetTimestamp","sunset","nowTimeStamp","WeatherApp","storageCity","localStorage","getItem","currentCity","setCurrentCity","currentLocation","weatherElement","fetchData","currentTheme","setCurrentTheme","currentPage","setCurrentPage","moment","sunriseCityName","setItem","cityName"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport { ThemeProvider } from 'emotion-theming';\nimport dayjs from 'dayjs';\nimport WeatherCard from './WeatherCard';\nimport useWeatherApi from './useWeatherApi';\nimport sunriseAndSunsetData from './sunrise-sunset.json';\nimport WeatherSetting from './WeatherSetting';\nimport { findLocation } from './utils';\n\nconst theme = {\n    light: {\n        backgroundColor: '#ededed',\n        foregroundColor: '#f9f9f9',\n        boxShadow: '0 1px 3px 0 #999999',\n        titleColor: '#212121',\n        temperatureColor: '#757575',\n        textColor: '#828282',\n    },\n    dark: {\n        backgroundColor: '#1F2022',\n        foregroundColor: '#121416',\n        boxShadow: '0 1px 4px 0 rgba(12, 12, 13, 0.2), 0 0 0 1px rgba(0, 0, 0, 0.15)',\n        titleColor: '#f9f9fa',\n        temperatureColor: '#dddddd',\n        textColor: '#cccccc',\n    },\n};\n\n\nconst getMoment = (locationName) => {\n    const location = sunriseAndSunsetData.find(\n        (data) => data.locationName === locationName\n    );\n\n    if (!location) return null;\n\n    const now = dayjs();\n    const nowDate = Intl.DateTimeFormat('zh-TW', {\n            year: 'numeric',\n            month: '2-digit',\n            day: '2-digit',\n        })\n        .format(now)\n        .replace(/\\//g, '-');\n\n    const locationDate =\n        location.time && location.time.find((time) => time.dataTime === nowDate);\n    const sunriseTimestamp = dayjs(\n        `${locationDate.dataTime} ${locationDate.sunrise}`\n    ).unix();\n    const sunsetTimestamp = dayjs(\n        `${locationDate.dataTime} ${locationDate.sunset}`\n    ).unix();\n\n    const nowTimeStamp = now.unix();\n\n    return sunriseTimestamp <= nowTimeStamp && nowTimeStamp <= sunsetTimestamp ?\n        'day' :\n        'night';\n};\n\nconst WeatherApp = () => {\n    // console.log('--- invoke function component ---');\n    const storageCity = localStorage.getItem('cityName');\n    const [currentCity, setCurrentCity] = useState(storageCity || '臺北市');\n    const currentLocation = findLocation(currentCity) || {};\n\n    const [weatherElement, fetchData] = useWeatherApi(currentLocation);\n\n    const [currentTheme, setCurrentTheme] = useState('light');\n    const [currentPage, setCurrentPage] = useState('WeatherCard');\n\n    const moment = useMemo(() => getMoment(currentLocation.sunriseCityName), [\n        currentLocation.sunriseCityName,\n    ]);\n\n    useEffect(() => {\n        setCurrentTheme(moment === 'day' ? 'light' : 'dark');\n    }, [moment]);\n\n    useEffect(() => {\n        localStorage.setItem('cityName', currentCity);\n    }, [currentCity]);\n\n    return ( <\n        ThemeProvider theme = { theme[currentTheme] } >\n        <\n        Container > {\n            currentPage === 'WeatherCard' && ( <\n                WeatherCard cityName = { currentLocation.cityName }\n                weatherElement = { weatherElement }\n                moment = { moment }\n                fetchData = { fetchData }\n                setCurrentPage = { setCurrentPage }\n                />\n            )\n        }\n\n        {\n            currentPage === 'WeatherSetting' && ( <\n                WeatherSetting cityName = { currentLocation.cityName }\n                setCurrentCity = { setCurrentCity }\n                setCurrentPage = { setCurrentPage }\n                />\n            )\n        } <\n        /Container> <\n        /ThemeProvider>\n    );\n};\n\nexport default WeatherApp;"]},"metadata":{},"sourceType":"module"}