{"ast":null,"code":"import _slicedToArray from\"C:/Users/Danny Boy/Documents/GitHub/danni-boii.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"C:/Users/Danny Boy/Documents/GitHub/danni-boii.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject;import React,{useState,useEffect,useMemo}from'react';import styled from'@emotion/styled';import{ThemeProvider}from'emotion-theming';import dayjs from'dayjs';import WeatherCard from'./WeatherCard';import useWeatherApi from'./useWeatherApi';import sunriseAndSunsetData from'./sunrise-sunset.json';import WeatherSetting from'./WeatherSetting';import{findLocation}from'./utils';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var theme={light:{backgroundColor:'#ededed',foregroundColor:'#f9f9f9',boxShadow:'0 1px 3px 0 #999999',titleColor:'#212121',temperatureColor:'#757575',textColor:'#828282'},dark:{backgroundColor:'#1F2022',foregroundColor:'#121416',boxShadow:'0 1px 4px 0 rgba(12, 12, 13, 0.2), 0 0 0 1px rgba(0, 0, 0, 0.15)',titleColor:'#f9f9fa',temperatureColor:'#dddddd',textColor:'#cccccc'}};var Container=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  background-color: \",\";\\n  height: 100%;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n\"])),function(_ref){var theme=_ref.theme;return theme.backgroundColor;});var getMoment=function getMoment(locationName){var location=sunriseAndSunsetData.find(function(data){return data.locationName===locationName;});if(!location)return null;var now=dayjs();var nowDate=Intl.DateTimeFormat('zh-TW',{year:'numeric',month:'2-digit',day:'2-digit'}).format(now).replace(/\\//g,'-');var locationDate=location.time&&location.time.find(function(time){return time.dataTime===nowDate;});var sunriseTimestamp=dayjs(\"\".concat(locationDate.dataTime,\" \").concat(locationDate.sunrise)).unix();var sunsetTimestamp=dayjs(\"\".concat(locationDate.dataTime,\" \").concat(locationDate.sunset)).unix();var nowTimeStamp=now.unix();return sunriseTimestamp<=nowTimeStamp&&nowTimeStamp<=sunsetTimestamp?'day':'night';};var WeatherApp=function WeatherApp(){// console.log('--- invoke function component ---');\nvar storageCity=localStorage.getItem('cityName');var _useState=useState(storageCity||'臺北市'),_useState2=_slicedToArray(_useState,2),currentCity=_useState2[0],setCurrentCity=_useState2[1];var currentLocation=findLocation(currentCity)||{};var _useWeatherApi=useWeatherApi(currentLocation),_useWeatherApi2=_slicedToArray(_useWeatherApi,2),weatherElement=_useWeatherApi2[0],fetchData=_useWeatherApi2[1];var _useState3=useState('light'),_useState4=_slicedToArray(_useState3,2),currentTheme=_useState4[0],setCurrentTheme=_useState4[1];var _useState5=useState('WeatherCard'),_useState6=_slicedToArray(_useState5,2),currentPage=_useState6[0],setCurrentPage=_useState6[1];var moment=useMemo(function(){return getMoment(currentLocation.sunriseCityName);},[currentLocation.sunriseCityName]);useEffect(function(){setCurrentTheme(moment==='day'?'light':'dark');},[moment]);useEffect(function(){localStorage.setItem('cityName',currentCity);},[currentCity]);return/*#__PURE__*/_jsx(ThemeProvider,{theme:theme[currentTheme],children:/*#__PURE__*/_jsxs(Container,{children:[currentPage==='WeatherCard'&&/*#__PURE__*/_jsx(WeatherCard,{cityName:currentLocation.cityName,weatherElement:weatherElement,moment:moment,fetchData:fetchData,setCurrentPage:setCurrentPage}),currentPage==='WeatherSetting'&&/*#__PURE__*/_jsx(WeatherSetting,{cityName:currentLocation.cityName,setCurrentCity:setCurrentCity,setCurrentPage:setCurrentPage})]})});};export default WeatherApp;","map":{"version":3,"sources":["C:/Users/Danny Boy/Documents/GitHub/danni-boii.github.io/src/WeatherApp.js"],"names":["React","useState","useEffect","useMemo","styled","ThemeProvider","dayjs","WeatherCard","useWeatherApi","sunriseAndSunsetData","WeatherSetting","findLocation","theme","light","backgroundColor","foregroundColor","boxShadow","titleColor","temperatureColor","textColor","dark","Container","div","getMoment","locationName","location","find","data","now","nowDate","Intl","DateTimeFormat","year","month","day","format","replace","locationDate","time","dataTime","sunriseTimestamp","sunrise","unix","sunsetTimestamp","sunset","nowTimeStamp","WeatherApp","storageCity","localStorage","getItem","currentCity","setCurrentCity","currentLocation","weatherElement","fetchData","currentTheme","setCurrentTheme","currentPage","setCurrentPage","moment","sunriseCityName","setItem","cityName"],"mappings":"kYAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,CAAqCC,OAArC,KAAoD,OAApD,CACA,MAAOC,CAAAA,MAAP,KAAmB,iBAAnB,CACA,OAASC,aAAT,KAA8B,iBAA9B,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,WAAP,KAAwB,eAAxB,CACA,MAAOC,CAAAA,aAAP,KAA0B,iBAA1B,CACA,MAAOC,CAAAA,oBAAP,KAAiC,uBAAjC,CACA,MAAOC,CAAAA,cAAP,KAA2B,kBAA3B,CACA,OAASC,YAAT,KAA6B,SAA7B,C,wFAEA,GAAMC,CAAAA,KAAK,CAAG,CACZC,KAAK,CAAE,CACLC,eAAe,CAAE,SADZ,CAELC,eAAe,CAAE,SAFZ,CAGLC,SAAS,CAAE,qBAHN,CAILC,UAAU,CAAE,SAJP,CAKLC,gBAAgB,CAAE,SALb,CAMLC,SAAS,CAAE,SANN,CADK,CASZC,IAAI,CAAE,CACJN,eAAe,CAAE,SADb,CAEJC,eAAe,CAAE,SAFb,CAGJC,SAAS,CACP,kEAJE,CAKJC,UAAU,CAAE,SALR,CAMJC,gBAAgB,CAAE,SANd,CAOJC,SAAS,CAAE,SAPP,CATM,CAAd,CAoBA,GAAME,CAAAA,SAAS,CAAGjB,MAAM,CAACkB,GAAV,oLACO,kBAAGV,CAAAA,KAAH,MAAGA,KAAH,OAAeA,CAAAA,KAAK,CAACE,eAArB,EADP,CAAf,CAQA,GAAMS,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,YAAD,CAAkB,CAClC,GAAMC,CAAAA,QAAQ,CAAGhB,oBAAoB,CAACiB,IAArB,CACf,SAACC,IAAD,QAAUA,CAAAA,IAAI,CAACH,YAAL,GAAsBA,YAAhC,EADe,CAAjB,CAIA,GAAI,CAACC,QAAL,CAAe,MAAO,KAAP,CAEf,GAAMG,CAAAA,GAAG,CAAGtB,KAAK,EAAjB,CACA,GAAMuB,CAAAA,OAAO,CAAGC,IAAI,CAACC,cAAL,CAAoB,OAApB,CAA6B,CAC3CC,IAAI,CAAE,SADqC,CAE3CC,KAAK,CAAE,SAFoC,CAG3CC,GAAG,CAAE,SAHsC,CAA7B,EAKbC,MALa,CAKNP,GALM,EAMbQ,OANa,CAML,KANK,CAME,GANF,CAAhB,CAQA,GAAMC,CAAAA,YAAY,CAChBZ,QAAQ,CAACa,IAAT,EAAiBb,QAAQ,CAACa,IAAT,CAAcZ,IAAd,CAAmB,SAACY,IAAD,QAAUA,CAAAA,IAAI,CAACC,QAAL,GAAkBV,OAA5B,EAAnB,CADnB,CAEA,GAAMW,CAAAA,gBAAgB,CAAGlC,KAAK,WACzB+B,YAAY,CAACE,QADY,aACAF,YAAY,CAACI,OADb,EAAL,CAEvBC,IAFuB,EAAzB,CAGA,GAAMC,CAAAA,eAAe,CAAGrC,KAAK,WACxB+B,YAAY,CAACE,QADW,aACCF,YAAY,CAACO,MADd,EAAL,CAEtBF,IAFsB,EAAxB,CAIA,GAAMG,CAAAA,YAAY,CAAGjB,GAAG,CAACc,IAAJ,EAArB,CAEA,MAAOF,CAAAA,gBAAgB,EAAIK,YAApB,EAAoCA,YAAY,EAAIF,eAApD,CACH,KADG,CAEH,OAFJ,CAGD,CA9BD,CAgCA,GAAMG,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CACvB;AACA,GAAMC,CAAAA,WAAW,CAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAApB,CAFuB,cAGehD,QAAQ,CAAC8C,WAAW,EAAI,KAAhB,CAHvB,wCAGhBG,WAHgB,eAGHC,cAHG,eAIvB,GAAMC,CAAAA,eAAe,CAAGzC,YAAY,CAACuC,WAAD,CAAZ,EAA6B,EAArD,CAJuB,mBAMa1C,aAAa,CAAC4C,eAAD,CAN1B,kDAMhBC,cANgB,oBAMAC,SANA,mCAQiBrD,QAAQ,CAAC,OAAD,CARzB,yCAQhBsD,YARgB,eAQFC,eARE,8BASevD,QAAQ,CAAC,aAAD,CATvB,yCAShBwD,WATgB,eASHC,cATG,eAWvB,GAAMC,CAAAA,MAAM,CAAGxD,OAAO,CAAC,iBAAMoB,CAAAA,SAAS,CAAC6B,eAAe,CAACQ,eAAjB,CAAf,EAAD,CAAmD,CACvER,eAAe,CAACQ,eADuD,CAAnD,CAAtB,CAIA1D,SAAS,CAAC,UAAM,CACdsD,eAAe,CAACG,MAAM,GAAK,KAAX,CAAmB,OAAnB,CAA6B,MAA9B,CAAf,CACD,CAFQ,CAEN,CAACA,MAAD,CAFM,CAAT,CAIAzD,SAAS,CAAC,UAAM,CACd8C,YAAY,CAACa,OAAb,CAAqB,UAArB,CAAiCX,WAAjC,EACD,CAFQ,CAEN,CAACA,WAAD,CAFM,CAAT,CAIA,mBACE,KAAC,aAAD,EAAe,KAAK,CAAEtC,KAAK,CAAC2C,YAAD,CAA3B,uBACE,MAAC,SAAD,YACGE,WAAW,GAAK,aAAhB,eACC,KAAC,WAAD,EACE,QAAQ,CAAEL,eAAe,CAACU,QAD5B,CAEE,cAAc,CAAET,cAFlB,CAGE,MAAM,CAAEM,MAHV,CAIE,SAAS,CAAEL,SAJb,CAKE,cAAc,CAAEI,cALlB,EAFJ,CAWGD,WAAW,GAAK,gBAAhB,eACC,KAAC,cAAD,EACE,QAAQ,CAAEL,eAAe,CAACU,QAD5B,CAEE,cAAc,CAAEX,cAFlB,CAGE,cAAc,CAAEO,cAHlB,EAZJ,GADF,EADF,CAuBD,CA9CD,CAgDA,cAAeZ,CAAAA,UAAf","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport styled from '@emotion/styled';\nimport { ThemeProvider } from 'emotion-theming';\nimport dayjs from 'dayjs';\nimport WeatherCard from './WeatherCard';\nimport useWeatherApi from './useWeatherApi';\nimport sunriseAndSunsetData from './sunrise-sunset.json';\nimport WeatherSetting from './WeatherSetting';\nimport { findLocation } from './utils';\n\nconst theme = {\n  light: {\n    backgroundColor: '#ededed',\n    foregroundColor: '#f9f9f9',\n    boxShadow: '0 1px 3px 0 #999999',\n    titleColor: '#212121',\n    temperatureColor: '#757575',\n    textColor: '#828282',\n  },\n  dark: {\n    backgroundColor: '#1F2022',\n    foregroundColor: '#121416',\n    boxShadow:\n      '0 1px 4px 0 rgba(12, 12, 13, 0.2), 0 0 0 1px rgba(0, 0, 0, 0.15)',\n    titleColor: '#f9f9fa',\n    temperatureColor: '#dddddd',\n    textColor: '#cccccc',\n  },\n};\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.backgroundColor};\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst getMoment = (locationName) => {\n  const location = sunriseAndSunsetData.find(\n    (data) => data.locationName === locationName\n  );\n\n  if (!location) return null;\n\n  const now = dayjs();\n  const nowDate = Intl.DateTimeFormat('zh-TW', {\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n  })\n    .format(now)\n    .replace(/\\//g, '-');\n\n  const locationDate =\n    location.time && location.time.find((time) => time.dataTime === nowDate);\n  const sunriseTimestamp = dayjs(\n    `${locationDate.dataTime} ${locationDate.sunrise}`\n  ).unix();\n  const sunsetTimestamp = dayjs(\n    `${locationDate.dataTime} ${locationDate.sunset}`\n  ).unix();\n\n  const nowTimeStamp = now.unix();\n\n  return sunriseTimestamp <= nowTimeStamp && nowTimeStamp <= sunsetTimestamp\n    ? 'day'\n    : 'night';\n};\n\nconst WeatherApp = () => {\n  // console.log('--- invoke function component ---');\n  const storageCity = localStorage.getItem('cityName');\n  const [currentCity, setCurrentCity] = useState(storageCity || '臺北市');\n  const currentLocation = findLocation(currentCity) || {};\n\n  const [weatherElement, fetchData] = useWeatherApi(currentLocation);\n\n  const [currentTheme, setCurrentTheme] = useState('light');\n  const [currentPage, setCurrentPage] = useState('WeatherCard');\n\n  const moment = useMemo(() => getMoment(currentLocation.sunriseCityName), [\n    currentLocation.sunriseCityName,\n  ]);\n\n  useEffect(() => {\n    setCurrentTheme(moment === 'day' ? 'light' : 'dark');\n  }, [moment]);\n\n  useEffect(() => {\n    localStorage.setItem('cityName', currentCity);\n  }, [currentCity]);\n\n  return (\n    <ThemeProvider theme={theme[currentTheme]}>\n      <Container>\n        {currentPage === 'WeatherCard' && (\n          <WeatherCard\n            cityName={currentLocation.cityName}\n            weatherElement={weatherElement}\n            moment={moment}\n            fetchData={fetchData}\n            setCurrentPage={setCurrentPage}\n          />\n        )}\n\n        {currentPage === 'WeatherSetting' && (\n          <WeatherSetting\n            cityName={currentLocation.cityName}\n            setCurrentCity={setCurrentCity}\n            setCurrentPage={setCurrentPage}\n          />\n        )}\n      </Container>\n    </ThemeProvider>\n  );\n};\n\nexport default WeatherApp;\n"]},"metadata":{},"sourceType":"module"}